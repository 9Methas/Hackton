"use client"

import type React from "react"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Send, ArrowLeft } from "lucide-react"

interface ConsultVolunteerProps {
  addMessage: (message: string, type?: "system" | "user") => void
}

interface ChatMessage {
  id: number
  sender: "user" | "volunteer"
  content: string
  timestamp: Date
}

export function ConsultVolunteer({ addMessage }: ConsultVolunteerProps) {
  const [message, setMessage] = useState("")
  const [chatHistory, setChatHistory] = useState<ChatMessage[]>([
    {
      id: 1,
      sender: "volunteer",
      content: "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‡∏î‡∏¥‡∏â‡∏±‡∏ô‡∏û‡∏µ‡πà‡∏™‡∏°‡πÉ‡∏à ‡∏≠‡∏™‡∏°. ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?",
      timestamp: new Date(),
    },
  ])
  const [isSending, setIsSending] = useState(false)
  const [showChat, setShowChat] = useState(true)

  const handleSendMessage = () => {
    if (!message.trim()) return

    // Add user message to chat
    const userMessage = {
      id: chatHistory.length + 1,
      sender: "user" as const,
      content: message,
      timestamp: new Date(),
    }

    setChatHistory((prev) => [...prev, userMessage])
    addMessage(message, "user")
    setMessage("")
    setIsSending(true)

    // Simulate volunteer response
    setTimeout(() => {
      let response = ""

      if (message.toLowerCase().includes("‡∏ï‡∏£‡∏ß‡∏à‡∏ô‡πâ‡∏≥") || message.toLowerCase().includes("‡∏ó‡∏î‡∏™‡∏≠‡∏ö")) {
        response =
          "‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ô‡πâ‡∏≥‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏Å‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π '‡∏Ç‡∏≠‡∏ï‡∏£‡∏ß‡∏à/‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏ô‡πâ‡∏≥' ‡∏Ñ‡πà‡∏∞ ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏î‡∏¥‡∏â‡∏±‡∏ô‡πÑ‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡πÉ‡∏´‡πâ‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏±‡∏î‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞"
      } else if (message.toLowerCase().includes("‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ô‡πâ‡∏≥") || message.toLowerCase().includes("‡∏ô‡πâ‡∏≥‡πÑ‡∏°‡πà‡∏î‡∏µ")) {
        response = "‡∏´‡∏≤‡∏Å‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏ß‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏î‡∏µ ‡∏Ñ‡∏ß‡∏£‡∏™‡πà‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏≥‡∏°‡∏≤‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏™‡∏µ ‡∏Å‡∏•‡∏¥‡πà‡∏ô ‡πÅ‡∏•‡∏∞‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏ï‡∏∞‡∏Å‡∏≠‡∏ô‡πÉ‡∏ô‡∏ô‡πâ‡∏≥"
      } else if (message.toLowerCase().includes("‡∏£‡∏≤‡∏Ñ‡∏≤") || message.toLowerCase().includes("‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢")) {
        response =
          "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ô‡πâ‡∏≥‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡∏î‡∏µ ‡πÅ‡∏ï‡πà‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£ ‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 500-1,500 ‡∏ö‡∏≤‡∏ó ‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à"
      } else {
        response =
          "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡πà‡∏∞ ‡∏î‡∏¥‡∏â‡∏±‡∏ô‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏ó‡∏£‡∏´‡∏≤‡∏î‡∏¥‡∏â‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå 08x-xxx-xxxx ‡∏Ñ‡πà‡∏∞"
      }

      const volunteerMessage = {
        id: chatHistory.length + 2,
        sender: "volunteer",
        content: response,
        timestamp: new Date(),
      }

      setChatHistory((prev) => [...prev, volunteerMessage])
      addMessage(response)
      setIsSending(false)
    }, 1500)
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  const handleViewHistory = () => {
    setShowChat(false)
  }

  const handleBackToChat = () => {
    setShowChat(true)
  }

  return (
    <div className="rounded-lg bg-white p-4 shadow-md">
      <h3 className="mb-3 text-center font-bold">‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤ ‡∏≠‡∏™‡∏°.</h3>

      {showChat ? (
        <>
          <div className="mb-4 rounded-lg border border-gray-200 bg-gray-50 p-3">
            <div className="mb-2 flex items-center">
              <div className="mr-2 h-8 w-8 rounded-full bg-gray-300">
                <div className="flex h-full items-center justify-center">
                  <span className="text-sm">üë©‚Äç‚öïÔ∏è</span>
                </div>
              </div>
              <div>
                <div className="text-sm font-medium">‡∏û‡∏µ‡πà‡∏™‡∏°‡πÉ‡∏à ‡πÉ‡∏à‡∏î‡∏µ</div>
                <div className="text-xs text-gray-500">‡∏≠‡∏™‡∏°. ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô</div>
              </div>
              <button onClick={handleViewHistory} className="ml-auto text-xs text-blue-600">
                ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
              </button>
            </div>
          </div>

          <div className="mb-3 h-[200px] overflow-y-auto rounded-lg border border-gray-200 bg-gray-50 p-3">
            {chatHistory.map((chat) => (
              <div key={chat.id} className={`mb-2 flex ${chat.sender === "user" ? "justify-end" : "justify-start"}`}>
                {chat.sender === "volunteer" && (
                  <div className="mr-2 h-6 w-6 flex-shrink-0 rounded-full bg-gray-300">
                    <div className="flex h-full items-center justify-center">
                      <span className="text-xs">üë©‚Äç‚öïÔ∏è</span>
                    </div>
                  </div>
                )}
                <div
                  className={`max-w-[70%] rounded-lg p-2 ${
                    chat.sender === "user" ? "bg-[#00B900] text-white" : "bg-white text-black shadow"
                  }`}
                >
                  <p className="text-sm">{chat.content}</p>
                  <div className="mt-1 text-right text-xs opacity-70">
                    {chat.timestamp.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })}
                  </div>
                </div>
              </div>
            ))}
            {isSending && (
              <div className="flex justify-start">
                <div className="mr-2 h-6 w-6 flex-shrink-0 rounded-full bg-gray-300">
                  <div className="flex h-full items-center justify-center">
                    <span className="text-xs">üë©‚Äç‚öïÔ∏è</span>
                  </div>
                </div>
                <div className="flex space-x-1 rounded-lg bg-white p-3 shadow">
                  <div className="h-2 w-2 animate-bounce rounded-full bg-gray-400"></div>
                  <div
                    className="h-2 w-2 animate-bounce rounded-full bg-gray-400"
                    style={{ animationDelay: "0.2s" }}
                  ></div>
                  <div
                    className="h-2 w-2 animate-bounce rounded-full bg-gray-400"
                    style={{ animationDelay: "0.4s" }}
                  ></div>
                </div>
              </div>
            )}
          </div>

          <div className="flex">
            <Textarea
              placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤..."
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              onKeyDown={handleKeyPress}
              className="min-h-[80px] resize-none"
              disabled={isSending}
            />
            <Button
              onClick={handleSendMessage}
              className="ml-2 bg-[#00B900] hover:bg-[#009900]"
              disabled={!message.trim() || isSending}
            >
              <Send className="h-4 w-4" />
            </Button>
          </div>
        </>
      ) : (
        <div className="space-y-4">
          <div className="flex items-center">
            <Button variant="ghost" size="icon" onClick={handleBackToChat} className="mr-2">
              <ArrowLeft className="h-4 w-4" />
            </Button>
            <h4 className="font-medium">‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤</h4>
          </div>

          <div className="space-y-2">
            <div className="rounded-lg border border-gray-200 p-3">
              <div className="flex justify-between">
                <span className="font-medium">‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏±‡∏ö ‡∏û‡∏µ‡πà‡∏™‡∏°‡πÉ‡∏à</span>
                <span className="text-sm text-gray-500">‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</span>
              </div>
              <p className="mt-1 text-sm text-gray-600 line-clamp-1">{chatHistory[chatHistory.length - 1].content}</p>
            </div>

            <div className="rounded-lg border border-gray-200 p-3">
              <div className="flex justify-between">
                <span className="font-medium">‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏±‡∏ö ‡∏û‡∏µ‡πà‡∏™‡∏°‡πÉ‡∏à</span>
                <span className="text-sm text-gray-500">10 ‡∏°‡∏¥.‡∏¢. 2568</span>
              </div>
              <p className="mt-1 text-sm text-gray-600 line-clamp-1">
                ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏∞ ‡∏î‡∏¥‡∏â‡∏±‡∏ô‡∏à‡∏∞‡∏°‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏ô‡πâ‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏ï‡∏≤‡∏°‡∏ô‡∏±‡∏î‡∏ô‡∏∞‡∏Ñ‡∏∞
              </p>
            </div>

            <div className="rounded-lg border border-gray-200 p-3">
              <div className="flex justify-between">
                <span className="font-medium">‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏±‡∏ö ‡∏û‡∏µ‡πà‡∏™‡∏°‡πÉ‡∏à</span>
                <span className="text-sm text-gray-500">5 ‡∏°‡∏¥.‡∏¢. 2568</span>
              </div>
              <p className="mt-1 text-sm text-gray-600 line-clamp-1">
                ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ô‡πâ‡∏≥‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡∏ô‡πâ‡∏≥‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏î‡∏µ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏≠‡∏∏‡∏õ‡πÇ‡∏†‡∏Ñ‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏∞
              </p>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
