"use client"

import type React from "react"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Phone, ArrowLeft, CheckCircle } from "lucide-react"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"

interface WaterTestingRequestProps {
  addMessage: (message: string, type?: "system" | "user") => void
}

type RequestStep = "options" | "volunteer-info" | "self-report" | "confirmation"

export function WaterTestingRequest({ addMessage }: WaterTestingRequestProps) {
  const [step, setStep] = useState<RequestStep>("options")
  const [formData, setFormData] = useState({
    name: "",
    phone: "",
    address: "",
    wellId: "",
    testType: "basic",
    notes: "",
  })
  const [errors, setErrors] = useState<Record<string, string>>({})

  const handleRequestTesting = () => {
    addMessage("‡∏Ç‡∏≠‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ô‡πâ‡∏≥", "user")
    setStep("volunteer-info")
  }

  const handleReportResults = () => {
    addMessage("‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á", "user")
    setStep("self-report")
  }

  const handleCallNow = () => {
    addMessage("‡πÇ‡∏ó‡∏£‡πÄ‡∏•‡∏¢", "user")
    addMessage("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏ó‡∏£‡∏´‡∏≤ ‡∏≠‡∏™‡∏°. ‡∏™‡∏°‡πÉ‡∏à ‡πÉ‡∏à‡∏î‡∏µ...")
    setTimeout(() => {
      addMessage("‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‡∏≠‡∏™‡∏°. ‡∏à‡∏∞‡∏°‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏ô‡πâ‡∏≥‡πÉ‡∏´‡πâ‡∏ó‡πà‡∏≤‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏ß‡∏•‡∏≤ 10:00 ‡∏ô.")
    }, 1500)
  }

  const handleRequestCallback = () => {
    addMessage("‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö", "user")
    addMessage("‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á ‡∏≠‡∏™‡∏°. ‡πÅ‡∏•‡πâ‡∏ß ‡∏ó‡πà‡∏≤‡∏ô‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á")
    setStep("confirmation")
  }

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setFormData((prev) => ({ ...prev, [name]: value }))
    if (errors[name]) {
      setErrors((prev) => ({ ...prev, [name]: "" }))
    }
  }

  const handleRadioChange = (value: string) => {
    setFormData((prev) => ({ ...prev, testType: value }))
  }

  const validateForm = () => {
    const newErrors: Record<string, string> = {}

    if (!formData.wellId) {
      newErrors.wellId = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏ö‡πà‡∏≠"
    }

    if (!formData.name) {
      newErrors.name = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠"
    }

    if (!formData.phone) {
      newErrors.phone = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"
    } else if (!/^\d{9,10}$/.test(formData.phone.replace(/[-\s]/g, ""))) {
      newErrors.phone = "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSubmitReport = () => {
    if (validateForm()) {
      addMessage(`‡∏™‡πà‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ô‡πâ‡∏≥‡∏ö‡πà‡∏≠ #${formData.wellId} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`, "user")
      addMessage("‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•! ‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ô‡πâ‡∏≥‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ô‡∏≥‡πÑ‡∏õ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏ï‡πà‡∏≠‡πÑ‡∏õ")
      setStep("confirmation")
    }
  }

  const handleBackToOptions = () => {
    setStep("options")
    setFormData({
      name: "",
      phone: "",
      address: "",
      wellId: "",
      testType: "basic",
      notes: "",
    })
    setErrors({})
  }

  if (step === "options") {
    return (
      <div className="space-y-4 rounded-2xl bg-white p-6 shadow-sm">
        <div className="text-center">
          <div className="mb-4 inline-flex rounded-full bg-blue-100 p-3">
            <svg className="h-8 w-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
              />
            </svg>
          </div>
          <h3 className="mb-2 text-lg font-bold text-gray-800">‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ô‡πâ‡∏≥</h3>
          <p className="text-sm text-gray-600">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</p>
        </div>

        <div className="space-y-3">
          <button
            onClick={handleRequestTesting}
            className="w-full rounded-xl bg-gradient-to-r from-[#00B900] to-[#00A000] p-4 text-white transition-all hover:shadow-lg active:scale-95"
          >
            <div className="flex items-center justify-center">
              <span className="mr-2 text-xl">üôã‚Äç‚ôÇÔ∏è</span>
              <span className="font-medium">‡∏Ç‡∏≠‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ô‡πâ‡∏≥</span>
            </div>
          </button>

          <button
            onClick={handleReportResults}
            className="w-full rounded-xl border-2 border-gray-200 bg-white p-4 text-gray-700 transition-all hover:bg-gray-50 active:scale-95"
          >
            <div className="flex items-center justify-center">
              <span className="mr-2 text-xl">üìù</span>
              <span className="font-medium">‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á</span>
            </div>
          </button>
        </div>
      </div>
    )
  }

  if (step === "volunteer-info") {
    return (
      <div className="space-y-4 rounded-2xl bg-white p-6 shadow-sm">
        <div className="flex items-center">
          <Button variant="ghost" size="icon" onClick={handleBackToOptions} className="mr-2">
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <h3 className="flex-1 text-center font-bold text-gray-800">‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ ‡∏≠‡∏™‡∏°.</h3>
        </div>

        <div className="text-center">
          <div className="mb-4 inline-flex rounded-full bg-green-100 p-4">
            <span className="text-3xl">üë©‚Äç‚öïÔ∏è</span>
          </div>
          <h4 className="mb-1 text-lg font-semibold text-gray-800">‡∏û‡∏µ‡πà‡∏™‡∏°‡πÉ‡∏à ‡πÉ‡∏à‡∏î‡∏µ</h4>
          <p className="mb-2 text-sm text-gray-600">‡∏≠‡∏≤‡∏™‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏™‡∏∏‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô</p>
          <div className="mb-4 flex items-center justify-center rounded-lg bg-blue-50 p-2">
            <Phone className="mr-2 h-4 w-4 text-blue-600" />
            <span className="font-mono text-blue-600">08x-xxx-xxxx</span>
          </div>
        </div>

        <div className="rounded-lg bg-gray-50 p-4">
          <p className="text-center text-sm text-gray-600">
            ‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏ó‡∏£‡∏´‡∏≤‡∏û‡∏µ‡πà‡∏™‡∏°‡πÉ‡∏à‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏™‡πà‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏û‡∏µ‡πà‡∏™‡∏°‡πÉ‡∏à‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡πà‡∏≤‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
          </p>
        </div>

        <div className="grid grid-cols-2 gap-3">
          <button
            onClick={handleCallNow}
            className="rounded-xl bg-gradient-to-r from-[#00B900] to-[#00A000] p-3 text-white transition-all hover:shadow-lg active:scale-95"
          >
            <div className="flex items-center justify-center">
              <span className="mr-1 text-lg">üìû</span>
              <span className="text-sm font-medium">‡πÇ‡∏ó‡∏£‡πÄ‡∏•‡∏¢</span>
            </div>
          </button>
          <button
            onClick={handleRequestCallback}
            className="rounded-xl border-2 border-gray-200 bg-white p-3 text-gray-700 transition-all hover:bg-gray-50 active:scale-95"
          >
            <div className="flex items-center justify-center">
              <span className="mr-1 text-lg">üí¨</span>
              <span className="text-sm font-medium">‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö</span>
            </div>
          </button>
        </div>
      </div>
    )
  }

  if (step === "self-report") {
    return (
      <div className="space-y-4 rounded-2xl bg-white p-6 shadow-sm">
        <div className="flex items-center">
          <Button variant="ghost" size="icon" onClick={handleBackToOptions} className="mr-2">
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <h3 className="flex-1 text-center font-bold text-gray-800">‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏ô‡πâ‡∏≥</h3>
        </div>

        <div className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="wellId" className="text-sm font-medium text-gray-700">
              ‡∏£‡∏´‡∏±‡∏™‡∏ö‡πà‡∏≠ <span className="text-red-500">*</span>
            </Label>
            <Input
              id="wellId"
              name="wellId"
              placeholder="‡πÄ‡∏ä‡πà‡∏ô SRN-1025"
              value={formData.wellId}
              onChange={handleInputChange}
              className={`rounded-lg ${errors.wellId ? "border-red-500" : "border-gray-200"}`}
            />
            {errors.wellId && <p className="text-xs text-red-500">{errors.wellId}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="name" className="text-sm font-medium text-gray-700">
              ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á <span className="text-red-500">*</span>
            </Label>
            <Input
              id="name"
              name="name"
              placeholder="‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
              value={formData.name}
              onChange={handleInputChange}
              className={`rounded-lg ${errors.name ? "border-red-500" : "border-gray-200"}`}
            />
            {errors.name && <p className="text-xs text-red-500">{errors.name}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="phone" className="text-sm font-medium text-gray-700">
              ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå <span className="text-red-500">*</span>
            </Label>
            <Input
              id="phone"
              name="phone"
              placeholder="0xxxxxxxxx"
              value={formData.phone}
              onChange={handleInputChange}
              className={`rounded-lg ${errors.phone ? "border-red-500" : "border-gray-200"}`}
            />
            {errors.phone && <p className="text-xs text-red-500">{errors.phone}</p>}
          </div>

          <div className="space-y-2">
            <Label className="text-sm font-medium text-gray-700">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à</Label>
            <RadioGroup value={formData.testType} onValueChange={handleRadioChange} className="space-y-2">
              <div className="flex items-center space-x-2 rounded-lg border border-gray-200 p-3">
                <RadioGroupItem value="basic" id="basic" />
                <Label htmlFor="basic" className="text-sm">
                  ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (pH, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏£‡∏∞‡∏î‡πâ‡∏≤‡∏á, ‡πÄ‡∏´‡∏•‡πá‡∏Å)
                </Label>
              </div>
              <div className="flex items-center space-x-2 rounded-lg border border-gray-200 p-3">
                <RadioGroupItem value="advanced" id="advanced" />
                <Label htmlFor="advanced" className="text-sm">
                  ‡∏ï‡∏£‡∏ß‡∏à‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (‡∏£‡∏ß‡∏°‡πÇ‡∏•‡∏´‡∏∞‡∏´‡∏ô‡∏±‡∏Å ‡πÅ‡∏ö‡∏Ñ‡∏ó‡∏µ‡πÄ‡∏£‡∏µ‡∏¢)
                </Label>
              </div>
            </RadioGroup>
          </div>

          <div className="space-y-2">
            <Label htmlFor="notes" className="text-sm font-medium text-gray-700">
              ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            </Label>
            <Textarea
              id="notes"
              name="notes"
              placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°..."
              value={formData.notes}
              onChange={handleInputChange}
              className="min-h-[80px] rounded-lg border-gray-200"
            />
          </div>

          <button
            onClick={handleSubmitReport}
            className="w-full rounded-xl bg-gradient-to-r from-[#00B900] to-[#00A000] p-4 text-white transition-all hover:shadow-lg active:scale-95"
          >
            <span className="font-medium">‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</span>
          </button>
        </div>
      </div>
    )
  }

  if (step === "confirmation") {
    return (
      <div className="space-y-4 rounded-2xl bg-white p-6 shadow-sm">
        <div className="text-center">
          <div className="mb-4 inline-flex rounded-full bg-green-100 p-4">
            <CheckCircle className="h-8 w-8 text-green-600" />
          </div>
          <h3 className="mb-2 text-lg font-bold text-gray-800">‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢</h3>
          <p className="mb-6 text-sm text-gray-600">‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß</p>
          <button
            onClick={handleBackToOptions}
            className="rounded-xl border-2 border-gray-200 bg-white px-6 py-3 text-gray-700 transition-all hover:bg-gray-50 active:scale-95"
          >
            <span className="font-medium">‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</span>
          </button>
        </div>
      </div>
    )
  }

  return null
}
